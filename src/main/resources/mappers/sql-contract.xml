<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="contract">

	<cache />

	<!--
	계약 관리 
	 -->	
	<select id="getContractInfoList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractInfoList
			실적 입력 내역 리스트 조회 
		*/
		WITH RESULT_LIST AS
		(
				SELECT 
				 R.RESULT_ID
				,TO_CHAR( R.RESULT_DATE,   'YYYY-MM-DD') AS RESULT_DATE /* 실적일 */
				,TO_CHAR( R.RESULT_DATE,   'YYYY') AS RESULT_YEAR /* 실적년 */
				,TO_CHAR( R.RESULT_DATE,   'MM') AS RESULT_MONTH /* 실적월 */
				,NULL 							 AS TEAM  
				,B.HOW_GET
				,GET_CODE_NM('HOW_GET', B.HOW_GET)		AS HOW_GET_NM /* 유입경로 */
				,C.CONTRACT_TYPE
				,GET_CODE_NM('CONTRACT_TYPE', C.CONTRACT_TYPE)		AS CONTRACT_TYPE_NM /* 구분 */ 
				,C.USER_ID AS CONTRACT_USER_ID /*담당자*/
				,GET_USER_NM(C.USER_ID) AS CONTRACT_USER_NM /* 담당자*/
				,B.COMPANY_REGNUM 						/* 사업자등록번호*/
				,B.BUYER_NM								/*거래처 */
				,CT.CONSULTING_NM						/*컨설팅 명*/
				,C.TOTAL_COST							/*총계약 금액*/
				,R.INCOME/*입금액*/
				,R.REMAINING_SUM/*잔금*/
				,R.ORG_SELLING_PRICE/*순매출*/
				,RL.SHARE_RATE  /*지급율*/
				,R.TOTAL_PAYMENT/*총수수료*/
				,P.PAYMENT /*담당자수수료*/
				,DECODE(  RL.GUBUN , 'CO_WORK1' , GET_USER_NM(RL.USER_ID),'') AS COWORK1_USER_NM/*코웍1*/
				,DECODE(  RL.GUBUN , 'CO_WORK1' , RL.SHARE_RATE,0) ||'%' AS COWORK1_SHARE_RATE/*코웍1*/
				,DECODE(  RL.GUBUN , 'CO_WORK1' , RL.SHARE_RATE,0) *  R.ORG_SELLING_PRICE AS COWORK1_PAYMENT/*코웍1*/
		
				,DECODE(  RL.GUBUN , 'CO_WORK2' , GET_USER_NM(RL.USER_ID),'') AS COWORK2_USER_NM/*코웍2*/
				,DECODE(  RL.GUBUN , 'CO_WORK2' , RL.SHARE_RATE,0) ||'%' AS COWORK2_SHARE_RATE/*코웍2*/
				,DECODE(  RL.GUBUN , 'CO_WORK2' , RL.SHARE_RATE,0) *  R.ORG_SELLING_PRICE AS COWORK2_PAYMENT/*코웍2*/
				
				,( DECODE(RL.RELATION_TYPE , 'TEAM_CAPTAIN' , RL.SHARE_RATE , 0) * R.ORG_SELLING_PRICE ) AS TEAM_CAPTAIN_PAYMENT/*팀장 수당 */ 
				,( DECODE(RL.RELATION_TYPE , 'CONTRACTOR' , RL.SHARE_RATE , 0) * R.ORG_SELLING_PRICE ) AS CONTRACTOR_PAYMENT/*지점장수당  */
				,C."CONTRACT_ID"
				,C.USER_ID
				,C.SP_CSTM_ID
				,TO_CHAR( C.CONTACT_DATE , 'YYYY-MM-DD') AS CONTACT_DATE
				,TO_CHAR( C.CONTRACT_DATE, 'YYYY-MM-DD') AS CONTRACT_DATE
				,TO_CHAR( C.EXPIRE_DATE,   'YYYY-MM-DD') AS EXPIRE_DATE
				,C.CONSULTING_ID
				,C.LAST_SOLUTION
				,C.TAX_MNG
				,C.LABOR_MNG
				,C.BUYER_ID
				,C.PROCESS_STATE
				,GET_CODE_NM('PROCESS_STATE', C.PROCESS_STATE)		AS PROCESS_STATE_NM
				,b.tel AS BUYER_TEL
				,b.addr AS BUYER_ADDR 
		
				,COST.COST_ID
				,COST.COST_NM
				,COST.COST_DESC
				,COST.COST_PRICE
				,P.USER_ID AS PAYMENT_USER_ID
				,RL.RELATION_TYPE
				,GET_CODE_NM('RELATION_TYPE', RL.RELATION_TYPE)		AS RELATION_TYPE_NM
				,GET_CODE_NM('SHARE_TYPE', RL.SHARE_TYPE)		AS SHARE_TYPE_NM
				FROM TBL_EXP_RESULT R 
				, TBL_EXP_CONTRACT C
				, TBL_EXP_BUYER B
				, TBL_EXP_CONSULTING CT
				, TBL_EXP_COST COST
				, TBL_EXP_PAYMENT P
				, (
					SELECT 
					    CASE 
					        WHEN RELATION_TYPE = 'CO_WORK' 
					        THEN 'CO_WORK' || ROW_NUMBER() OVER(PARTITION BY RELATION_TYPE ORDER BY CONTRACT_ID)
					        ELSE RELATION_TYPE
					    END AS GUBUN,
					    CONTRACT_ID,
					    RELATION_TYPE,
					    USER_ID,
					    SHARE_RATE,
					    SHARE_TYPE
					FROM  TBL_EXP_CONTRACT_RELATION
				) RL
				WHERE 1=1
				AND R.CONTRACT_ID	= C.CONTRACT_ID 
				AND C.BUYER_ID		= B.BUYER_ID
				AND C.CONSULTING_ID	= CT.CONSULTING_ID
				
				AND C.CONTRACT_ID = COST.CONTRACT_ID
				AND C.CONTRACT_ID = P.CONTRACT_ID
				AND C.CONTRACT_ID = RL.CONTRACT_ID
				AND C.SP_CSTM_ID = B.SP_CSTM_ID
		
				ORDER BY RESULT_DATE
		)		
			
		SELECT  DISTINCT
				 RESULT_ID
				,RESULT_YEAR 	/* 실적년 */
				,RESULT_MONTH 	/* 실적월 */
				,TEAM  
				,HOW_GET
				,HOW_GET_NM 	/* 유입경로*/
				,CONTRACT_TYPE
				,CONTRACT_TYPE_NM /* 구분 */
				,CONTRACT_USER_ID /*담당자*/
				,CONTRACT_USER_NM /* 담당자*/
				,COMPANY_REGNUM 	/* 사업자등록번호*/
				,BUYER_NM			/*거래처 */
				,CONSULTING_NM		/*컨설팅 명*/
				,CONSULTING_ID
				
				,TOTAL_COST			/*총계약 금액*/
				,INCOME				/*입금액*/
				,REMAINING_SUM		/*잔금*/
				,ORG_SELLING_PRICE	/*순매출*/
				,TOTAL_PAYMENT		/*총수수료*/
				
				,MAX(PAYMENT)			AS PAYMENT 
				,MAX(COWORK1_USER_NM)	AS COWORK1_USER_NM/*코웍1*/
				,MAX(COWORK1_SHARE_RATE) AS COWORK1_SHARE_RATE	
				,MAX(COWORK1_PAYMENT) AS COWORK1_PAYMENT	
				,MAX(COWORK2_USER_NM) AS COWORK2_USER_NM	/*코웍2*/
				,MAX(COWORK2_SHARE_RATE) AS COWORK2_SHARE_RATE	
				,MAX(COWORK2_PAYMENT) AS COWORK2_PAYMENT	
				,MAX(TEAM_CAPTAIN_PAYMENT) AS TEAM_CAPTAIN_PAYMENT/*팀장 수당*/ 
				,MAX(CONTRACTOR_PAYMENT) AS CONTRACTOR_PAYMENT		/*지점장수당*/
		
				,MAX(SHARE_RATE) SHARE_RATE  		/*지급율*/
		
		FROM RESULT_LIST
		
		GROUP BY 
				 RESULT_ID
				,RESULT_YEAR 	/* 실적년 */
				,RESULT_MONTH 	/* 실적월 */
				,TEAM  
				,HOW_GET
				,HOW_GET_NM 	/* 유입경로*/
				,CONTRACT_TYPE
				,CONTRACT_TYPE_NM /* 구분*/ 
				,CONTRACT_USER_ID /*담당자*/
				,CONTRACT_USER_NM /* 담당자*/
				,COMPANY_REGNUM 	/* 사업자등록번호*/
				,BUYER_NM			/*거래처 */
				,CONSULTING_NM		/*컨설팅 명*/
				,CONSULTING_ID
				,TOTAL_COST			/*총계약 금액*/
				
				,INCOME				/*입금액*/
				,REMAINING_SUM		/*잔금*/
				,ORG_SELLING_PRICE	/*순매출*/
				,TOTAL_PAYMENT		/*총수수료*/
		ORDER BY RESULT_ID				
	</select>

	<!--
	계약 관리 
	 -->	
	<select id="getContractItem" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractItem
			계약 조회 
		*/
		SELECT C.CONTRACT_ID
		,C.BUYER_ID 
		,C.PROCESS_STATE 
		,TO_CHAR( C.CONTACT_DATE , 'YYYY-MM-DD') 	AS CONTACT_DATE 
		,C.USER_ID 									AS USER_ID
		,GET_USER_NM(C.USER_ID) 					AS USER_NM /* 담당자*/
		,C.CONTRACT_TYPE
		,GET_CODE_NM('CONTRACT_TYPE', C.CONTRACT_TYPE)	AS CONTRACT_TYPE_NM
		,C.TOTAL_COST /* 계약금액 */
		,TO_CHAR( C.CONTRACT_DATE , 'YYYY-MM-DD' ) 	AS CONTRACT_DATE 
		,TO_CHAR( C.EXPIRE_DATE , 'YYYY-MM-DD' ) 	AS EXPIRE_DATE 
		,C.TOTAL_COST /* 총계약금액 */
		,C.CONSULTING_ID
		,'컨설팅명' CONSULTING_NM /* 컨설팅명 */
		,TAX_MNG
		,LABOR_MNG
		,CONSULTING_CLASS
		,GET_CODE_NM('CONSULTING_CLASS', C.CONSULTING_CLASS)	AS CONSULTING_CLASS_NM
		,C.USE_YN
		,C.DEL_YN
		FROM TBL_EXP_CONTRACT C 
		WHERE 1=1
		AND C.CONTRACT_ID = #{CONTRACT_ID}
		AND C.USE_YN = 'Y'
		AND C.DEL_YN = 'N'
	</select>		
	
	<select id="getContractList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractList
			계약 리스트 조회 
		*/
		SELECT C.CONTRACT_ID
		,C.BUYER_ID 
		,B.BUYER_NM
		,C.PROCESS_STATE 
		,TO_CHAR( C.CONTACT_DATE , 'YYYY-MM-DD') 	AS CONTACT_DATE 
		,C.USER_ID 									AS USER_ID
		,GET_USER_NM(C.USER_ID) 					AS USER_NM /* 담당자*/
		,GET_USER_NM(C.USER_ID) || '( ' || C.USER_ID || ' )'  AS "USER"
		,C.CONTRACT_TYPE
		,GET_CODE_NM('CONTRACT_TYPE', C.CONTRACT_TYPE)	AS CONTRACT_TYPE_NM
		,TO_CHAR( C.CONTRACT_DATE , 'YYYY-MM-DD' ) 	AS CONTRACT_DATE 
		,TO_CHAR( C.EXPIRE_DATE , 'YYYY-MM-DD' ) 	AS EXPIRE_DATE 
		,C.TOTAL_COST /* 총계약금액 */
		,C.CONSULTING_ID
		,CT.CONSULTING_NM /* 컨설팅명 */
		,TAX_MNG
		,LABOR_MNG
		,CONSULTING_CLASS
		,GET_CODE_NM('CONSULTING_CLASS', C.CONSULTING_CLASS)	AS CONSULTING_CLASS_NM
		,C.USE_YN
		,C.DEL_YN
		,NVL(( 	SELECT MIN( REMAINING_SUM ) FROM TBL_EXP_RESULT I 
				WHERE I.CONTRACT_ID = C.CONTRACT_ID AND I.USE_YN = 'Y' AND I.DEL_YN = 'N')
			,C.TOTAL_COST) AS REMAINING_SUM
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_BUYER B
		,TBL_EXP_CONSULTING CT
		WHERE C.BUYER_ID = B.BUYER_ID(+)
		<if test=" CONTRACT_ID != null and !CONTRACT_ID.equals('') ">
		AND C.CONTRACT_ID = #{CONTRACT_ID}
		</if>
		AND C.USE_YN = 'Y'
		AND C.DEL_YN = 'N'
		AND C.CONSULTING_ID = CT.CONSULTING_ID
		ORDER BY C.UPDATE_DATE DESC
	</select>	

	<select id="getBuyerList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getBuyerList
			고객 리스트 조회 
		*/
		SELECT BUYER_ID
		, BUYER_NM
		, TEL
		, ADDR
		, COMPANY_REGNUM
		FROM TBL_EXP_BUYER
		WHERE  1=1
		AND ( UPPER(BUYER_ID)	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(BUYER_NM)	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(ADDR) 		like '%' || UPPER( #{SEARCH_ID} ) || '%'
		)
		AND USE_YN = 'Y'
		AND DEL_YN = 'N'
	</select>		

	<select id="getUserList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getUserList
			계약 담당자 리스트 조회 
		*/
		SELECT SP_CSTM_ID
		, USER_ID
		, USER_NM
		, USER_DESC
		, E_MAIL
		, PHONE_NUM
		, BRANCH_ID
		, "ROLE"
		, GRADE
		, GET_CODE_NM('GRADE', GRADE)		AS GRADE_NM
		, STATE
		, REG_DATE
		, JUMIN
		, POST_NUM
		, ADDR1
		, ADDR2
		, UPDATE_USER
		, UPDATE_DATE
		, SURETY_INSURANCE
		, GENDER
		, SALES_TYPE
		, GET_CODE_NM('SALES_TYPE', SALES_TYPE)		AS SALES_TYPE_NM
		, RECOMMENDER_ID
		, GET_CODE_NM('USER_ID', RECOMMENDER_ID)		AS RECOMMENDER_NM 
		FROM TBL_EXP_USER
		WHERE 1=1
		AND ( UPPER(USER_ID) 	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(USER_NM) 	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(GRADE) like '%'||UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(GET_CODE_NM('GRADE', GRADE)) like '%'||UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(GET_CODE_NM('SALES_TYPE', SALES_TYPE)) 
								like '%' || UPPER( #{SEARCH_ID} ) || '%'
		)
		AND USE_YN = 'Y'
		AND DEL_YN = 'N'
		<if test=" EXCEPT_MEMERS != null and !EXCEPT_MEMERS.equals('') ">
		    <foreach item="member" collection="EXCEPT_MEMERS" open="AND USER_ID  NOT IN (" close=")" separator=",">
    			#{member}
    		</foreach>	
		</if>
		ORDER BY USER_NM				
	</select>	
	
	<update id="updateContract" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.updateContract
			계약  저장
		*/
		MERGE INTO TBL_EXP_CONTRACT T
		USING (
		  SELECT #{CONTRACT_ID}							AS CONTRACT_ID,
		         #{USER_ID} 							AS USER_ID,
		         #{BUYER_ID} 							AS BUYER_ID,
		         TO_DATE(#{CONTACT_DATE},'YYYY-MM-DD') 	AS CONTACT_DATE,
		         TO_DATE(#{CONTRACT_DATE},'YYYY-MM-DD')	AS CONTRACT_DATE,
		         #{CONTRACT_TYPE} 						AS CONTRACT_TYPE,
		         TO_DATE(#{EXPIRE_DATE},'YYYY-MM-DD')	AS EXPIRE_DATE,
		         REPLACE(#{TOTAL_COST},',','') 			AS TOTAL_COST,
				 #{CONSULTING_ID} 						AS CONSULTING_ID,
				 #{PROCESS_STATE} 						AS PROCESS_STATE,
		         #{LAST_SOLUTION} 						AS LAST_SOLUTION,
		         #{TAX_MNG} 							AS TAX_MNG,
		         #{LABOR_MNG} 							AS LABOR_MNG,
		         #{CONSULTING_CLASS} 					AS CONSULTING_CLASS,
		         #{USE_YN} 								AS USE_YN,
		         #{DEL_YN} 								AS DEL_YN, 
		         #{sessionVo.userId}					AS UPDATE_USER
		  FROM dual
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.USER_ID 			= S.USER_ID,
		         T.BUYER_ID 		= S.BUYER_ID,
		         T.CONTACT_DATE 	= S.CONTACT_DATE,
		         T.CONTRACT_DATE 	= S.CONTRACT_DATE,
		         T.CONTRACT_TYPE 	= S.CONTRACT_TYPE,
		         T.EXPIRE_DATE 		= S.EXPIRE_DATE,
		         T.TOTAL_COST 		= S.TOTAL_COST,
 		         T.CONSULTING_ID 	= S.CONSULTING_ID,
 		         T.PROCESS_STATE 	= S.PROCESS_STATE,
		         T.LAST_SOLUTION 	= S.LAST_SOLUTION, 
		         T.TAX_MNG 			= S.TAX_MNG,
		         T.LABOR_MNG 		= S.LABOR_MNG,
		         T.CONSULTING_CLASS	= S.CONSULTING_CLASS,
		         T.USE_YN			= S.USE_YN,
		         T.DEL_YN			= S.DEL_YN,
		         T.UPDATE_USER		= S.UPDATE_USER,
		         T.UPDATE_DATE		= SYSDATE
		WHEN NOT MATCHED THEN 
     		INSERT (  CONTRACT_ID, USER_ID, BUYER_ID, CONTACT_DATE, CONTRACT_DATE, CONTRACT_TYPE, EXPIRE_DATE
    				, TOTAL_COST, CONSULTING_ID, PROCESS_STATE, LAST_SOLUTION,  TAX_MNG, LABOR_MNG, CONSULTING_CLASS, USE_YN
    				, DEL_YN,  UPDATE_USER,   UPDATE_DATE )
   			VALUES (  S.CONTRACT_ID, S.USER_ID, S.BUYER_ID, S.CONTACT_DATE, S.CONTRACT_DATE, S.CONTRACT_TYPE, S.EXPIRE_DATE
    				, S.TOTAL_COST, S.CONSULTING_ID, S.PROCESS_STATE,  S.LAST_SOLUTION, S.TAX_MNG, S.LABOR_MNG, S.CONSULTING_CLASS, S.USE_YN
    				, S.DEL_YN,  S.UPDATE_USER,   SYSDATE )
    		
	</update>
	
	<delete id="deleteContract" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.deleteContract
			계약 삭제
		*/
		UPDATE TBL_EXP_CONTRACT
		SET USE_YN = 'N'
		,DEL_YN = 'Y'
		WHERE CONTRACT_ID	 = #{CONTRACT_ID}
	</delete>
	
	<select id="getContractMemberList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractMemberList
			계약 관계자 조회 
		*/
		SELECT 
		  CM.CONTRACT_ID
		, CM.USER_ID
		, U.USER_NM
		, U.GRADE
		, GET_CODE_NM ( 'GRADE', U.GRADE) AS GRADE_NM
		, CM.RELATION_TYPE
		, CM.BUSINESS_HIERARCHY
		, GET_CODE_NM('BUSINESS_HIERARCHY',CM.BUSINESS_HIERARCHY  ) AS POSITION
		, CM.USE_YN
		, CM.DEL_YN
		, CM.UPDATE_USER
		, CM.UPDATE_DATE
		FROM TBL_EXP_CONTRACT_MEMBER CM
		, TBL_EXP_USER U
		WHERE 1=1 
		AND CM.CONTRACT_ID =  #{CONTRACT_ID}
		AND CM.USER_ID = U.USER_ID
		AND CM.USE_YN = 'Y'
		AND CM.DEL_YN = 'N'
		AND CM.RELATION_TYPE !='OVERRIDING' /* OVERRIDING 주석 */
		ORDER BY 
		CASE CM.RELATION_TYPE
		    WHEN 'EXECUTE'		THEN '1'
		    WHEN 'COWORK' 		THEN '2'
		    WHEN 'SALES' 		THEN '3'
		    WHEN 'OVERRIDING'	THEN '4'
		    WHEN 'SUGGESTER'	THEN '5'
	    END ,
	    CASE CM.BUSINESS_HIERARCHY
		    WHEN 'MAIN_HEADER'		THEN '1'
		    WHEN 'LOCAL_HEADER' 	THEN '2'
		    WHEN 'DEPT_HEADER' 		THEN '3' 
	    END
	</select>	
		

	<update id="updateContractMember" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.updateContractMember
			계약 관계자 저장
		*/
		MERGE INTO TBL_EXP_CONTRACT_MEMBER T
		USING (
		  SELECT #{CONTRACT_ID}		AS CONTRACT_ID,
		         #{USER_ID} 		AS USER_ID,
		         #{RELATION_TYPE} 	AS RELATION_TYPE,
		         #{BUSINESS_HIERARCHY} AS BUSINESS_HIERARCHY,
		         #{USE_YN} 			AS USE_YN,
		         #{DEL_YN} 			AS DEL_YN,
		         #{sessionVo.userId}	AS UPDATE_USER
		  FROM dual
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		AND T.USER_ID		= S.USER_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.RELATION_TYPE 			= S.RELATION_TYPE,
		         T.BUSINESS_HIERARCHY 		= S.BUSINESS_HIERARCHY,
		         T.USE_YN					= S.USE_YN,
		         T.DEL_YN					= S.DEL_YN,
		         T.UPDATE_USER				= S.UPDATE_USER,
		         T.UPDATE_DATE				= SYSDATE
		WHEN NOT MATCHED THEN 
    		INSERT (    CONTRACT_ID,   USER_ID,   RELATION_TYPE,   BUSINESS_HIERARCHY, USE_YN,   DEL_YN,   UPDATE_USER, UPDATE_DATE)
   			VALUES (  S.CONTRACT_ID, S.USER_ID, S.RELATION_TYPE, S.BUSINESS_HIERARCHY, 'Y'	 , 	 'N'   , S.UPDATE_USER, SYSDATE)
	</update>
	
	<delete id="deleteContractMember" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.deleteContractMember
			계약 관계자 삭제
		*/
		DELETE FROM  TBL_EXP_CONTRACT_MEMBER
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
	</delete>
	

	<select id="getOverridingList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getOverridingList
			Overriding 관련 상급자 조회 
		*/
		SELECT 'MAIN_HEADER' AS BUSINESS_HIERARCHY ,GET_CODE_NM('BUSINESS_HIERARCHY','MAIN_HEADER'  ) AS POSITION
		,BB.USER_ID , GET_USER_NM(BB.USER_ID) AS USER_NM, GET_CODE_NM('GRADE',U.GRADE) AS GRADE_NM , 'OVERRIDING' AS RELATION_TYPE
		FROM TBL_EXP_USER U, TBL_EXP_BASE_BRANCH BB,TBL_EXP_SP_BRANCH SB , TBL_EXP_BRANCH BR 
		WHERE  BR.BRANCH_ID = #{BRANCH_ID} 
		AND BR.SP_BRANCH_ID = SB.SP_BRANCH_ID AND SB.BASE_BRANCH_ID = BB.BASE_BRANCH_ID AND U.USER_ID = BB.USER_ID
		 
		UNION ALL
		
		SELECT 'LOCAL_HEADER' ,GET_CODE_NM('BUSINESS_HIERARCHY','LOCAL_HEADER'  ) 
		,SB.USER_ID , GET_USER_NM(SB.USER_ID), GET_CODE_NM('GRADE',U.GRADE)   , 'OVERRIDING'
		FROM   TBL_EXP_USER U,TBL_EXP_SP_BRANCH SB , TBL_EXP_BRANCH BR 
		WHERE  BR.BRANCH_ID = #{BRANCH_ID}  
		AND BR.SP_BRANCH_ID = SB.SP_BRANCH_ID AND U.USER_ID = SB.USER_ID
		 
		UNION ALL
		
		SELECT 'DEPT_HEADER' ,GET_CODE_NM('BUSINESS_HIERARCHY','DEPT_HEADER'  ) 
		,BR.USER_ID  ,GET_USER_NM(BR.USER_ID), GET_CODE_NM('GRADE',U.GRADE)  , 'OVERRIDING'
		FROM   TBL_EXP_USER U,TBL_EXP_BRANCH BR 
		WHERE BR.BRANCH_ID = #{BRANCH_ID}  
		AND U.USER_ID = BR.USER_ID
	</select>	
	
	
	
			
</mapper>
