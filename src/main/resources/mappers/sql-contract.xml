<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="contract">

	<sql id="getContractList_body">
		SELECT ROW_NUMBER() OVER (ORDER BY C.UPDATE_DATE DESC) AS RN
		,C.CONTRACT_ID
		,C.BUYER_ID 
		,B.BUYER_NM
		,B.BUYER_NM || ' ( ' || B.BUYER_ID || ' )'  AS "BUYER"
		,C.PROCESS_STATE
		,GET_CODE_NM('PROCESS_STATE', C.PROCESS_STATE ) AS PROCESS_STATE_NM 
		,TO_CHAR( C.CONTACT_DATE , 'YYYY-MM-DD') 	AS CONTACT_DATE 
		,C.USER_ID 									AS USER_ID
		,U.USER_NM				 					AS USER_NM /* 담당자*/
		,U.USER_NM || '( ' || C.USER_ID || ' )'  	AS "USER"
		,C.CONTRACT_TYPE
		,GET_CODE_NM('CONTRACT_TYPE', C.CONTRACT_TYPE)	AS CONTRACT_TYPE_NM
		,TO_CHAR( C.CONTRACT_DATE , 'YYYY-MM-DD' ) 	AS CONTRACT_DATE 
		,TO_CHAR( C.EXPIRE_DATE , 'YYYY-MM-DD' ) 	AS EXPIRE_DATE 
		,C.TOTAL_COST /* 총계약금액 */
		,C.CONSULTING_ID
		,CT.CONSULTING_NM/* 컨설팅명 */
		,CT.CONSULTING_TYPE
		,GET_CODE_NM('CONSULTING_TYPE', CT.CONSULTING_TYPE )  CONSULTING_TYPE_NM
		,TAX_MNG
		,LABOR_MNG
		,CONSULTING_CLASS
		,GET_CODE_NM('CONSULTING_CLASS', C.CONSULTING_CLASS)	AS CONSULTING_CLASS_NM
		,C.USE_YN
		,C.DEL_YN
		,NVL(( 	SELECT MIN( REMAINING_SUM ) FROM TBL_EXP_RESULT I 
				WHERE I.CONTRACT_ID = C.CONTRACT_ID AND I.USE_YN = 'Y' AND I.DEL_YN = 'N')
			,C.TOTAL_COST) AS REMAINING_SUM
		,U.RECOMMENDER_ID
		,GET_CODE_NM('USER_ID', U.RECOMMENDER_ID)		AS RECOMMENDER_NM 
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_BUYER B
		,TBL_EXP_CONSULTING CT
		,TBL_EXP_USER U
		WHERE C.BUYER_ID = B.BUYER_ID(+)
		<if test=" parm.CONTRACT_ID != null and !parm.CONTRACT_ID.equals('') ">
		AND C.CONTRACT_ID = #{parm.CONTRACT_ID}
		</if>
		AND C.USE_YN = 'Y' 		AND C.DEL_YN = 'N'
		AND U.USE_YN = 'Y'      AND U.DEL_YN = 'N'
		AND C.CONSULTING_ID = CT.CONSULTING_ID		
		AND C.USER_ID = U.USER_ID
		AND C.PROCESS_STATE != 'PRE_CONTRACT'
		<if test=" parm.PROCESS_STATE != null and !parm.PROCESS_STATE.equals('') ">
			AND C.PROCESS_STATE = #{parm.PROCESS_STATE}
		</if>
       	<if test='parm.IS_MULTI_SEARCH == "Y" '>  
	        AND (
        	<if test=" parm.BUYER_ID != null and !parm.BUYER_ID.equals('') ">
		        C.BUYER_ID like '%' || #{parm.BUYER_ID} || '%'
        	</if>
        	<if test=" parm.BUYER_ID != null and !parm.BUYER_ID.equals('') ">
        		<if test=" parm.BUYER_NM != null and !parm.BUYER_NM.equals('') ">
        		OR
        		</if>
		        B.BUYER_NM like '%' || #{parm.BUYER_NM} || '%'
        	</if>
        	<if test=" parm.USER_NM != null and !parm.USER_NM.equals('') ">
				<if test=" (parm.BUYER_ID != null and !parm.BUYER_ID.equals('') ) or ( parm.BUYER_NM != null and !parm.BUYER_NM.equals(''))">
        		OR
        		</if>
		        U.USER_NM like '%' || #{parm.USER_NM} || '%'
        	</if>
			<if test=" parm.BUYER_ID == '' and parm.BUYER_NM == '' and parm.USER_NM == '' ">
				1=1
			</if>        	
        	 )
		</if>		
	</sql>	
	<select id="getContractList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractList
			계약 리스트 조회 
		*/
		<include refid="getContractList_body"/>
		ORDER BY C.UPDATE_DATE DESC
	</select>	
	<select id="getContractList_totalCnt" resultType="Integer">
		/* contract.getContractList_totalCnt  */
		<include refid="common.totalWrapStart"/>
		<include refid="getContractList_body"/>
		<include refid="common.totalWrapEnd"/>
	</select>
	<select id="getContractList_paging" resultType="java.util.HashMap">
		/* contract.getContractList_paging  */
		<include refid="common.pagingWrapStart"/>
		<include refid="getContractList_body"/>
		ORDER BY C.UPDATE_DATE DESC
		<include refid="common.pagingWrapEnd"/>
	</select>
	
	<select id="getBuyerList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getBuyerList
			고객 리스트 조회 
		*/
		SELECT BUYER_ID
		, BUYER_NM
		, TEL
		, ADDR
		, COMPANY_REGNUM
		FROM TBL_EXP_BUYER
		WHERE  1=1
		AND ( UPPER(BUYER_ID)	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(BUYER_NM)	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR    UPPER(ADDR) 		like '%' || UPPER( #{SEARCH_ID} ) || '%'
		)
		AND USE_YN = 'Y'
		AND DEL_YN = 'N'
	</select>		

	<select id="getUserList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getUserList
			계약 담당자 리스트 조회 
		*/
		SELECT SP_CSTM_ID
		, USER_ID
		, USER_NM
		, USER_DESC
		, E_MAIL
		, PHONE_NUM
		, BRANCH_ID
		, "ROLE"
		, GRADE
		, GET_CODE_NM('GRADE', GRADE)		AS GRADE_NM
		, STATE
		, REG_DATE
		, JUMIN
		, POST_NUM
		, ADDR1
		, ADDR2
		, UPDATE_USER
		, UPDATE_DATE
		, SURETY_INSURANCE
		, GENDER
		, SALES_TYPE
		, GET_CODE_NM('SALES_TYPE', SALES_TYPE)		AS SALES_TYPE_NM
		, RECOMMENDER_ID							AS RECOMMENDER_ID
		, GET_USER_NM(RECOMMENDER_ID)				AS RECOMMENDER_NM 
		FROM TBL_EXP_USER
		WHERE 1=1
		AND ( 
		   UPPER(USER_ID) 						like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR UPPER(USER_NM) 						like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR UPPER(GRADE) 						like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR UPPER(GET_CODE_NM('GRADE', GRADE))	like '%' || UPPER( #{SEARCH_ID} ) || '%'
		OR UPPER(GET_CODE_NM('SALES_TYPE', SALES_TYPE)) 
												like '%' || UPPER( #{SEARCH_ID} ) || '%' )
		AND USE_YN = 'Y'
		AND DEL_YN = 'N'
		<if test=" EXCEPT_MEMERS != null and !EXCEPT_MEMERS.equals('') ">
		    <foreach item="member" collection="EXCEPT_MEMERS" open="AND USER_ID NOT IN (" close=")" separator=",">
    			#{member}
    		</foreach>	
		</if>
		ORDER BY USER_NM				
	</select>	
	
	<update id="updateContract" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.updateContract
			계약  저장
		*/
		MERGE INTO TBL_EXP_CONTRACT T
		USING (
		  SELECT #{CONTRACT_ID}							AS CONTRACT_ID,
		         #{USER_ID} 							AS USER_ID,
		         #{BUYER_ID} 							AS BUYER_ID,
		         TO_DATE(#{CONTACT_DATE},'YYYY-MM-DD') 	AS CONTACT_DATE,
		         TO_DATE(#{CONTRACT_DATE},'YYYY-MM-DD')	AS CONTRACT_DATE,
		         #{CONTRACT_TYPE} 						AS CONTRACT_TYPE,
		         TO_DATE(#{EXPIRE_DATE},'YYYY-MM-DD')	AS EXPIRE_DATE,
		         REPLACE(#{TOTAL_COST},',','') 			AS TOTAL_COST,
		         #{TAX_MNG} 							AS TAX_MNG,
		         #{LABOR_MNG} 							AS LABOR_MNG,
		         #{CONSULTING_CLASS} 					AS CONSULTING_CLASS,
				 #{CONSULTING_ID} 						AS CONSULTING_ID,
				 <if test=" PROCESS_STATE != null and !PROCESS_STATE.equals('') ">
				 #{PROCESS_STATE} 						AS PROCESS_STATE,
				 </if>
				 <if test=" LAST_SOLUTION != null and !LAST_SOLUTION.equals('') ">
		         #{LAST_SOLUTION} 						AS LAST_SOLUTION,
		         </if>
		         #{sessionVo.userId}					AS UPDATE_USER
		  FROM dual
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.USER_ID 			= S.USER_ID,
		         T.BUYER_ID 		= S.BUYER_ID,
		         T.CONTACT_DATE 	= S.CONTACT_DATE,
		         T.CONTRACT_DATE 	= S.CONTRACT_DATE,
		         T.CONTRACT_TYPE 	= S.CONTRACT_TYPE,
		         T.EXPIRE_DATE 		= S.EXPIRE_DATE,
		         T.TOTAL_COST 		= S.TOTAL_COST,
		         T.TAX_MNG 			= S.TAX_MNG,
		         T.LABOR_MNG 		= S.LABOR_MNG,
		         T.CONSULTING_CLASS	= S.CONSULTING_CLASS,
 		         T.CONSULTING_ID 	= S.CONSULTING_ID,
				 <if test=" PROCESS_STATE != null and !PROCESS_STATE.equals('') ">
 		         T.PROCESS_STATE 	= S.PROCESS_STATE,
				 </if>
				 <if test=" LAST_SOLUTION != null and !LAST_SOLUTION.equals('') ">
		         T.LAST_SOLUTION 	= S.LAST_SOLUTION, 
		         </if>
		         T.UPDATE_USER		= S.UPDATE_USER,
		         T.UPDATE_DATE		= SYSDATE
		WHEN NOT MATCHED THEN 
     		INSERT (  CONTRACT_ID, USER_ID, BUYER_ID, CONTACT_DATE, CONTRACT_DATE, CONTRACT_TYPE, EXPIRE_DATE
    				, TOTAL_COST,  TAX_MNG, LABOR_MNG , PROCESS_STATE	, CONSULTING_ID
    				, CONSULTING_CLASS
					 <if test=" LAST_SOLUTION != null and !LAST_SOLUTION.equals('') ">
	    				, LAST_SOLUTION
	    			 </if>	
    				 , UPDATE_USER  
	    			 , UPDATE_DATE
	    			 , USE_YN
	    			 , DEL_YN
    				)
   			VALUES (  S.CONTRACT_ID, S.USER_ID, S.BUYER_ID, S.CONTACT_DATE, S.CONTRACT_DATE, S.CONTRACT_TYPE, S.EXPIRE_DATE
    				, S.TOTAL_COST, S.TAX_MNG, S.LABOR_MNG , 'PRE_CONTRACT' , S.CONSULTING_ID 
    				, S.CONSULTING_CLASS
					<if test=" LAST_SOLUTION != null and !LAST_SOLUTION.equals('') ">
	    				, S.LAST_SOLUTION
	    			 </if>
    				 , S.UPDATE_USER
	    			 , SYSDATE
	    			 , 'Y'
	    			 , 'N' 
    				)
	</update>
	
	<select id="canNextState" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.canNextState
			진행상태 변경가능 확인 ( from 체결 진행중 to 체결 완료 ) 
		*/
		SELECT CASE WHEN SUM(CNT) > 1100 THEN 'Y' ELSE 'N' END  CAN_NEXT_STATE 
		FROM (
				SELECT 1000 CNT 
				FROM TBL_EXP_CONTRACT 
				WHERE CONTRACT_ID = #{CONTRACT_ID} 
				AND USE_YN = 'Y' AND DEL_YN = 'N' 
				AND PROCESS_STATE ='CONTRACTING' 
			UNION ALL 
				SELECT 100 
				FROM TBL_EXP_CONTRACT_MEMBER  
				WHERE CONTRACT_ID = #{CONTRACT_ID} 
				AND RELATION_TYPE = 'EXECUTE'  
				AND USE_YN = 'Y' AND DEL_YN = 'N'
			UNION ALL 
				SELECT COUNT(*) 
				FROM TBL_EXP_CONTRACT_MEMBER 
				WHERE CONTRACT_ID = #{CONTRACT_ID} 
				AND RELATION_TYPE != 'EXECUTE'  
				AND USE_YN = 'Y' AND DEL_YN = 'N'
		)		
	</select>	
	<update id="updateContractProcessState" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.updateContractProcessState
			계약 상태 변경
		*/
		UPDATE TBL_EXP_CONTRACT
		SET PROCESS_STATE = #{PROCESS_STATE}
		,	UPDATE_USER = #{sessionVo.userId}
		,	UPDATE_DATE = SYSDATE
		WHERE CONTRACT_ID	 = #{CONTRACT_ID}
	</update>
	
	<delete id="deleteContract" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.deleteContract
			계약 삭제
		*/
		UPDATE TBL_EXP_CONTRACT
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		,	UPDATE_USER = #{sessionVo.userId}
		,	UPDATE_DATE = SYSDATE
		WHERE CONTRACT_ID	 = #{CONTRACT_ID}
	</delete>
	
	<select id="getContractMemberList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getContractMemberList
			계약 관계자 조회 
		*/
		SELECT 
		  CM.CONTRACT_ID
		, CM.USER_ID
		, U.USER_NM
		, U.GRADE
		, GET_CODE_NM ( 'GRADE', U.GRADE) AS GRADE_NM
		, CM.RELATION_TYPE
		, CM.BUSINESS_HIERARCHY
		, GET_CODE_NM('BUSINESS_HIERARCHY',CM.BUSINESS_HIERARCHY  ) AS POSITION
		, CM.USE_YN
		, CM.DEL_YN
		, CM.UPDATE_USER
		, CM.UPDATE_DATE
		FROM TBL_EXP_CONTRACT_MEMBER CM
		, TBL_EXP_USER U
		WHERE 1=1 
		AND CM.CONTRACT_ID =  #{CONTRACT_ID}
		AND CM.USER_ID = U.USER_ID
		AND CM.USE_YN = 'Y'
		AND CM.DEL_YN = 'N'
		AND CM.RELATION_TYPE !='OVERRIDING' /* OVERRIDING 주석 */
		ORDER BY 
		CASE CM.RELATION_TYPE
		    WHEN 'EXECUTE'		THEN '1'
		    WHEN 'COWORK' 		THEN '2'
		    WHEN 'SALES' 		THEN '3'
		    WHEN 'OVERRIDING'	THEN '4'
		    WHEN 'SUGGESTER'	THEN '5'
	    END ,
	    CASE CM.BUSINESS_HIERARCHY
		    WHEN 'MAIN_HEADER'		THEN '1'
		    WHEN 'LOCAL_HEADER' 	THEN '2'
		    WHEN 'DEPT_HEADER' 		THEN '3' 
	    END
	</select>	

	<update id="updateContractMember" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.updateContractMember
			계약 관계자 저장
		*/
		MERGE INTO TBL_EXP_CONTRACT_MEMBER T
		USING (
		  SELECT #{CONTRACT_ID}		AS CONTRACT_ID,
		         #{USER_ID} 		AS USER_ID,
		         #{RELATION_TYPE} 	AS RELATION_TYPE,
		         ''					AS BUSINESS_HIERARCHY,
		         'Y'	 			AS USE_YN,
		         'N' 				AS DEL_YN,
		         #{sessionVo.userId}	AS UPDATE_USER
		  FROM dual
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		AND T.USER_ID		= S.USER_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.RELATION_TYPE 			= S.RELATION_TYPE,
		         T.BUSINESS_HIERARCHY 		= S.BUSINESS_HIERARCHY,
		         T.USE_YN					= S.USE_YN,
		         T.DEL_YN					= S.DEL_YN,
		         T.UPDATE_USER				= S.UPDATE_USER,
		         T.UPDATE_DATE				= SYSDATE
		WHEN NOT MATCHED THEN 
    		INSERT (    CONTRACT_ID,   USER_ID,   RELATION_TYPE,   BUSINESS_HIERARCHY, USE_YN,   DEL_YN,   UPDATE_USER, UPDATE_DATE)
   			VALUES (  S.CONTRACT_ID, S.USER_ID, S.RELATION_TYPE, S.BUSINESS_HIERARCHY, 'Y'	 , 	 'N'   , S.UPDATE_USER, SYSDATE)
	</update>
	
	<delete id="deleteContractMember" parameterType="java.util.HashMap"  flushCache="true" >
		/*	contract.deleteContractMember
			계약 관계자 삭제
		*/
		DELETE FROM  TBL_EXP_CONTRACT_MEMBER
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
	</delete>
	
<!-- 
	<select id="getOverridingList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getOverridingList
			Overriding 관련 상급자 조회 
		*/
		SELECT 'MAIN_HEADER' AS BUSINESS_HIERARCHY ,GET_CODE_NM('BUSINESS_HIERARCHY','MAIN_HEADER'  ) AS POSITION
		,BB.USER_ID , GET_USER_NM(BB.USER_ID) AS USER_NM, GET_CODE_NM('GRADE',U.GRADE) AS GRADE_NM , 'OVERRIDING' AS RELATION_TYPE
		FROM TBL_EXP_USER U, TBL_EXP_BASE_BRANCH BB,TBL_EXP_SP_BRANCH SB , TBL_EXP_BRANCH BR 
		WHERE  BR.BRANCH_ID = #{BRANCH_ID} 
		AND BR.SP_BRANCH_ID = SB.SP_BRANCH_ID AND SB.BASE_BRANCH_ID = BB.BASE_BRANCH_ID AND U.USER_ID = BB.USER_ID
		 
		UNION ALL
		
		SELECT 'LOCAL_HEADER' ,GET_CODE_NM('BUSINESS_HIERARCHY','LOCAL_HEADER'  ) 
		,SB.USER_ID , GET_USER_NM(SB.USER_ID), GET_CODE_NM('GRADE',U.GRADE)   , 'OVERRIDING'
		FROM   TBL_EXP_USER U,TBL_EXP_SP_BRANCH SB , TBL_EXP_BRANCH BR 
		WHERE  BR.BRANCH_ID = #{BRANCH_ID}  
		AND BR.SP_BRANCH_ID = SB.SP_BRANCH_ID AND U.USER_ID = SB.USER_ID
		 
		UNION ALL
		
		SELECT 'DEPT_HEADER' ,GET_CODE_NM('BUSINESS_HIERARCHY','DEPT_HEADER'  ) 
		,BR.USER_ID  ,GET_USER_NM(BR.USER_ID), GET_CODE_NM('GRADE',U.GRADE)  , 'OVERRIDING'
		FROM   TBL_EXP_USER U,TBL_EXP_BRANCH BR 
		WHERE BR.BRANCH_ID = #{BRANCH_ID}  
		AND U.USER_ID = BR.USER_ID
	</select>	
 -->
	<select id="getConsultingList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getConsultingList
			컨설팅 리스트 조회 
		*/
		SELECT CONSULTING_ID
		,CONSULTING_NM 
		,CONSULTING_TYPE 
		,GET_CODE_NM('CONSULTING_TYPE', CONSULTING_TYPE )  CONSULTING_TYPE_NM
		,CONSULTING_DESC 
		FROM TBL_EXP_CONSULTING 
		WHERE 1=1
		AND (
			CONSULTING_ID 	like '%' || #{SEARCH_ID} || '%'
		 OR CONSULTING_NM 	like '%' || #{SEARCH_ID} || '%'
		 OR GET_CODE_NM('CONSULTING_TYPE', CONSULTING_TYPE ) like '%' || #{SEARCH_ID} || '%'
		 OR CONSULTING_DESC like '%' || #{SEARCH_ID} || '%'
		)
	</select>	



	<update id="registProject">
		MERGE INTO TBL_EXP_CONTRACT T
		USING (
		  SELECT #{CONTRACT_ID}							AS CONTRACT_ID
		  FROM DUAL
		) S
		ON (
			T.CONTRACT_ID	= S.CONTRACT_ID 
		)
		WHEN MATCHED THEN
			UPDATE SET
				 T.USER_ID 			= #{USER_ID				}
				,T.BUYER_ID 		= #{BUYER_ID			}
				,T.CONSULTING_ID 	= #{CONSULTING_ID		}
				,T.UPDATE_USER		= #{sessionVo.userId	}
				,T.UPDATE_DATE		= SYSDATE
		WHEN NOT MATCHED THEN 
			INSERT ( 
				 CONTRACT_ID
				,USER_ID
				,BUYER_ID
				,CONSULTING_ID
				,PROCESS_STATE
				,USE_YN
				,DEL_YN
				,UPDATE_DATE
				,UPDATE_USER
				,SP_CSTM_ID
			) VALUES ( 
				 #{CONTRACT_ID			}
				,#{USER_ID				}
				,#{BUYER_ID				}
				,#{CONSULTING_ID		}
				,'PRE_CONTRACT'
				,'Y'
				,'N' 
	   			,sysdate
	   			,#{sessionVo.userId		}
				,#{sessionVo.spCstmId	}
			)
	</update>

	<select id="getProjectList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	contract.getProjectList
			프로젝트 리스트 조회 
		*/
		SELECT 
			 CONTRACT_ID
			,USER_ID
			,GET_USER_NM(A.USER_ID) AS USER_NM
			,BUYER_ID
			,(SELECT BUYER_NM FROM TBL_EXP_BUYER WHERE BUYER_ID = A.BUYER_ID) AS BUYER_NM
			,CONSULTING_ID
			,(SELECT CONSULTING_NM FROM TBL_EXP_CONSULTING WHERE CONSULTING_ID = A.CONSULTING_ID) AS CONSULTING_NM
			,PROCESS_STATE
			,GET_CODE_NM('PROCESS_STATE', PROCESS_STATE) AS PROCESS_STATE_NM
			,TO_CHAR( A.UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) AS UPDATE_DATE
		FROM 
		 	TBL_EXP_CONTRACT  A
		WHERE  1=1
			AND	UPDATE_USER = #{sessionVo.userId}
			AND	SP_CSTM_ID	= #{sessionVo.spCstmId}
		ORDER BY UPDATE_DATE DESC		
	</select>	


			
</mapper>
