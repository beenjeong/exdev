<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="result">

	<cache />

	<!--
	실적 관리 
	 -->	
	 
	<select id="getResultList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getResultList
			실적 내역 리스트 조회 
		*/
		
		SELECT DISTINCT
		 0 AS RN
		,C.TOTAL_COST 
		,TO_CHAR( R.RESULT_DATE, 'YYYY-MM-DD') AS RESULT_DATE
		,R.INCOME
		,R.REMAINING_SUM
		,NVL(CO.SUM_COST_PRICE ,0) AS COST_PRICE
		,R.CONTRACT_ID
		,R.RESULT_ID
		,U.USER_ID
		,U.USER_NM
		,U.GRADE
		,GET_CODE_NM( 'GRADE'	, U.GRADE ) GRADE_NM 
		,GET_CODE_NM( 'ROLE'	, U.ROLE  ) ROLE_NM
		,U.ROLE
		,CM.RELATION_TYPE
		,GET_CODE_NM( 'RELATION_TYPE', CM.RELATION_TYPE ) AS RELATION_TYPE_NM
		,P.RATE
		,P.PAYMENT
		,R.ORG_SELLING_PRICE
		,TO_NUMBER(R.ORG_SELLING_PRICE) - TO_NUMBER( P.PAYMENT ) AS REAL_PROFIT
		,R.USE_YN
		,R.DEL_YN
		,R.UPDATE_USER
		,R.UPDATE_DATE
		FROM TBL_EXP_RESULT R
		,TBL_EXP_CONTRACT C
		,(
			SELECT CONTRACT_ID, RESULT_ID, SUM(COST_PRICE) SUM_COST_PRICE
			FROM TBL_EXP_COST CS WHERE CS.CONTRACT_ID = #{CONTRACT_ID}
			AND USE_YN = 'Y' AND DEL_YN = 'N'
			GROUP BY CONTRACT_ID, RESULT_ID 
		) CO
		,TBL_EXP_PAYMENT P
		,TBL_EXP_CONTRACT_MEMBER CM
		,TBL_EXP_USER U
		WHERE C.CONTRACT_ID	= R.CONTRACT_ID 
		AND C.CONTRACT_ID	= CO.CONTRACT_ID(+) 
		AND R.RESULT_ID		= CO.RESULT_ID(+)
		AND R.CONTRACT_ID	= P.CONTRACT_ID 
		AND R.RESULT_ID		= P.RESULT_ID 
		AND R.CONTRACT_ID 	= #{CONTRACT_ID}
		<if test=" RESULT_ID != null and !RESULT_ID.equals('') ">
		AND R.RESULT_ID 	= #{RESULT_ID}
		</if>
		AND C.CONTRACT_ID 	= CM.CONTRACT_ID 
		AND P.USER_ID 		= CM.USER_ID
		AND P.USER_ID 		= U.USER_ID 
		<if test=" USER_ID != null and !USER_ID.equals('') ">
		AND U.USER_ID 		= #{USER_ID}
		</if>
		AND R.USE_YN		= 'Y'
		AND R.DEL_YN		= 'N'
		AND P.USE_YN		= 'Y'
		AND P.DEL_YN		= 'N'
		AND CM.USE_YN		= 'Y'
		AND CM.DEL_YN		= 'N'
		ORDER BY R.UPDATE_DATE , <include refid="buisnessHierarchyOrderBy"/>
	
	</select>	
	 
	<select id="getContractList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getContractList
			실적 입력을 위한 계약 리스트 조회 
		*/
	 
		SELECT 
		 C.BUYER_ID
		,B.BUYER_NM
		,U.USER_NM
		,C.TOTAL_COST 
		,C.CONTACT_DATE
		,TO_CHAR( C.CONTRACT_DATE , 'YYYY-MM-DD') AS CONTRACT_DATE
		,C.PROCESS_STATE
		,GET_CODE_NM( 'PROCESS_STATE', C.PROCESS_STATE ) PROCESS_STATE_MN
		,C.CONTRACT_ID
		,C.EXPIRE_DATE
		,GET_CODE_NM( 'CONTRACT_TYPE', C.CONTRACT_TYPE) CONTRACT_TYPE_NM
		,C.USER_ID, C.CONTRACT_DATE, C.CONTRACT_TYPE
		,C.CONSULTING_ID, C.PROCESS_STATE, C.LAST_SOLUTION, C.TAX_MNG, C.LABOR_MNG, C.CONSULTING_CLASS
		,C.USE_YN,C.DEL_YN,C.UPDATE_USER,C.UPDATE_DATE
		,( SELECT MIN( REMAINING_SUM ) FROM TBL_EXP_RESULT I 
		   WHERE I.CONTRACT_ID	= C.CONTRACT_ID
		   AND   I.USE_YN = 'Y' AND I.DEL_YN = 'N'  ) AS REMAINING_SUM 
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_USER U
		,TBL_EXP_BUYER B
		WHERE 1=1
		AND C.USE_YN	= 'Y' 
		AND C.DEL_YN 	= 'N'
		AND C.USER_ID	= U.USER_ID
		AND C.BUYER_ID	= B.BUYER_ID
		<choose>
	       	<when test=" USER_ID != null and !USER_ID.equals('') and USER != null and !USER.equals('')">  
				AND (	C.USER_ID  LIKE '%' || #{USER_ID} || '%'
				  	OR  U.USER_NM  LIKE '%' || #{USER_ID} || '%'
					OR  C.USER_ID  LIKE '%' || #{USER} || '%'
				  	OR  U.USER_NM  LIKE '%' || #{USER} || '%'
				  	)     
	      	</when>
	       	<when test=" USER_ID != null and !USER_ID.equals('') "> 
				AND (  C.USER_ID  LIKE '%' || #{USER_ID} || '%'
				  	OR  U.USER_NM  LIKE '%' || #{USER_ID} || '%'
				  	)
	      	</when>
	       	<when test=" USER != null and !USER.equals('') "> 
				AND (  C.USER_ID  LIKE '%' || #{USER} || '%'
				  	OR  U.USER_NM  LIKE '%' || #{USER} || '%'
				  	)
	      	</when>
	       	<when test=" BUYER_ID != null and !BUYER_ID.equals('') and BUYER != null and !BUYER.equals('')">  
				AND ( C.BUYER_ID LIKE '%' || #{BUYER_ID} || '%'
				   OR B.BUYER_NM LIKE '%' || #{BUYER_ID} || '%'     
				   OR C.BUYER_ID LIKE '%' || #{BUYER} || '%'
				   OR B.BUYER_NM LIKE '%' || #{BUYER} || '%'
				   )
	      	</when>
	       	<when test=" BUYER_ID != null and !BUYER_ID.equals('') "> 
				AND ( C.BUYER_ID LIKE '%' || #{BUYER_ID} || '%'
		   			OR B.BUYER_NM LIKE '%' || #{BUYER_ID} || '%'     
		   			)
	      	</when>
	      	<otherwise>			
	      	</otherwise>
		</choose>
		
		<if test=" FROM_DATE != null and !FROM_DATE.equals('') ">
		AND TO_CHAR( C.CONTACT_DATE, 'YYYY-MM-DD' )  <![CDATA[ >= ]]> #{FROM_DATE}
		</if>
		<if test=" TO_DATE != null and !TO_DATE.equals('') ">
		 AND TO_CHAR( C.CONTACT_DATE, 'YYYY-MM-DD')  <![CDATA[ <= ]]> #{TO_DATE}
		</if>
		ORDER BY C.CONTRACT_DATE DESC , C.CONTACT_DATE DESC
	
	</select>	
	
	<update id="updateResultItem" parameterType="java.util.HashMap"  flushCache="true" >
		<!-- x	result.updateResultItem
			실적 저장
		-->
	    { CALL
		    DECLARE
		        p_CONTRACT_ID	VARCHAR2(30);
		        p_RESULT_ID		VARCHAR2(30);
		        p_RESULT_DATE	VARCHAR2(30);
		        p_INCOME		VARCHAR2(30);
		        
		    BEGIN
		    
		    	p_CONTRACT_ID 	:= #{CONTRACT_ID};
		        p_RESULT_ID   	:= #{RESULT_ID};
		        p_RESULT_DATE   := #{RESULT_DATE};
		        p_INCOME   		:= #{INCOME};
		    
		    
				MERGE INTO TBL_EXP_RESULT T
				USING (
				
				  SELECT p_CONTRACT_ID				AS CONTRACT_ID,
				         p_RESULT_ID 				AS RESULT_ID,
				         TO_NUMBER(p_INCOME)		AS INCOME,
				         p_RESULT_DATE				AS RESULT_DATE,
				         'Y'	 					AS USE_YN,
				         'N'	 					AS DEL_YN,
				         'trigger'					AS UPDATE_USER,
				         SYSDATE					AS UPDATE_DATE
				  FROM dual
				  
				) S
				ON (T.CONTRACT_ID	= S.CONTRACT_ID 
				AND T.RESULT_ID		= S.RESULT_ID 
				)
				WHEN MATCHED THEN
				  UPDATE SET
				         T.RESULT_DATE 			= TO_DATE(S.RESULT_DATE,'YYYY-MM-DD'),
				         T.USE_YN				= S.USE_YN,
				         T.DEL_YN				= S.DEL_YN,
				         T.UPDATE_USER			= S.UPDATE_USER,
				         T.UPDATE_DATE			= SYSDATE
				WHEN NOT MATCHED THEN 
		    		INSERT (  CONTRACT_ID,   RESULT_ID,   RESULT_DATE,   INCOME,   USE_YN,   DEL_YN,   UPDATE_USER,   UPDATE_DATE)
		   			VALUES (S.CONTRACT_ID, S.RESULT_ID, S.RESULT_DATE, S.INCOME, S.USE_YN, S.DEL_YN, S.UPDATE_USER, S.UPDATE_DATE)
		   			;
		   			
		   		COMMIT;
		   			
		   		UPDATE TBL_EXP_RESULT T
		   		SET
					T.REMAINING_SUM			= 	( SELECT  TO_NUMBER( TOTAL_COST )   
													FROM TBL_EXP_CONTRACT 
				           							WHERE 	CONTRACT_ID = p_CONTRACT_ID
				          						)
				          						-
												( SELECT  SUM(INCOME)   
													FROM TBL_EXP_RESULT 
				           							WHERE 	CONTRACT_ID = p_CONTRACT_ID
				           							AND 	USE_YN= 'Y' AND DEL_YN = 'N'
				          						) 	,
					T.ORG_SELLING_PRICE		= T.INCOME - 						  
												( SELECT SUM(COST_PRICE) FROM TBL_EXP_COST
				           							WHERE CONTRACT_ID = p_CONTRACT_ID
				           							AND   RESULT_ID 	= p_RESULT_ID
				           							AND   USE_YN= 'Y' AND DEL_YN = 'N'
				          						)
		   		WHERE  T.CONTRACT_ID	= p_CONTRACT_ID
				   AND T.RESULT_ID		= p_RESULT_ID	
				;
				
				COMMIT;
			END
		}		   			
	</update>
	
	<delete id="deleteResultItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deleteResultItem
			실적 삭제
		*/
		UPDATE TBL_EXP_RESULT
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
	</delete>
		
	<sql id="cmUsers"> 
		SELECT DISTINCT CM.CONTRACT_ID, CM.USER_ID  
		,U.USER_NM 
		,DECODE( CM.RELATION_TYPE, 'EXECUTE','EXEC','SALES' ) AS EXEC_TYPE
		,GET_CODE_NM('RELATION_TYPE', CM.RELATION_TYPE) RELATION_TYPE_NM
		,U.ROLE
		,U.GRADE
		,GET_CODE_NM('GRADE', U.GRADE) GRADE_NM
		,CM.RELATION_TYPE
		,U.BRANCH_ID 
		,CM.BUSINESS_HIERARCHY
		,U.SALES_TYPE
		FROM TBL_EXP_CONTRACT_MEMBER CM 
		,TBL_EXP_USER U
		WHERE CM.CONTRACT_ID = #{CONTRACT_ID}
		AND CM.USER_ID = U.USER_ID
	</sql>
	
	<sql id="buisnessHierarchyOrderBy"> 
          CASE	
              WHEN RELATION_TYPE = 'EXECUTE'	THEN 10
              WHEN RELATION_TYPE = 'COWORK'		THEN 
                  CASE 
                      WHEN GRADE = 'S_MASTER'	THEN 20
                      WHEN GRADE = 'MASTER'		THEN 21
                      WHEN GRADE = 'FA' 		THEN 22
                      WHEN GRADE = 'SUGGESTER' 	THEN 23
                  END
              WHEN RELATION_TYPE = 'SALES' 		THEN
                  CASE 
                      WHEN GRADE = 'S_MASTER' 	THEN 30
                      WHEN GRADE = 'MASTER' 	THEN 31
                      WHEN GRADE = 'FA' 		THEN 32
                      WHEN GRADE = 'SUGGESTER' 	THEN 33
                  END
              WHEN RELATION_TYPE = 'OVERRIDING' THEN 41
          END
	</sql>
	
	<select id="selectTempPaymentItem" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.selectTempPaymentItem
			실적 수당 테이블 조회
		*/
		SELECT A.CONTRACT_ID
		, A.USER_ID
		, GET_USER_NM( A.USER_ID ) USER_NM
		, #{RESULT_ID} AS RESULT_ID
		, A.PAYMENT_ID
		, A.EXEC_TYPE
		, CM.RELATION_TYPE
		, GET_CODE_NM('RELATION_TYPE', CM.RELATION_TYPE ) AS RELATION_TYPE_NM
		, CM.BUSINESS_HIERARCHY
		, NVL(CM.BUSINESS_HIERARCHY , U.GRADE ) AS GRADE
		, P.PAY_ID
		, P.RATE
		, P.PAYMENT
		FROM (
			WITH CM_USER AS (
				<include refid="cmUsers"/>
			)
			SELECT A.*
			 ,ROW_NUMBER() OVER (ORDER BY <include refid="buisnessHierarchyOrderBy"/> ) AS PAYMENT_ID
			FROM(
				SELECT CMU.CONTRACT_ID 
				,CMU.USER_ID
				,CMU.USER_NM
				,CMU.GRADE_NM
				,CMU.EXEC_TYPE
				,CMU.RELATION_TYPE_NM
				,CMU.ROLE
				,CMU.GRADE
				,CMU.RELATION_TYPE
				,CMU.BRANCH_ID
				,CMU.BUSINESS_HIERARCHY
				FROM CM_USER CMU
				WHERE CMU.RELATION_TYPE !='OVERRIDING'
				
				UNION ALL 
				
				SELECT CMU.CONTRACT_ID 
				,CMU.USER_ID
				,CMU.USER_NM
				,BH.POSITION  GRADE_NM
				,CMU.EXEC_TYPE
				,GET_CODE_NM('RELATION_TYPE', CMU.RELATION_TYPE) RELATION_TYPE_NM
				,'OVERRIDING' AS ROLE
				,BH.POSITION GRADE
				,CMU.RELATION_TYPE
				,CMU.BRANCH_ID
				,BH.BUSINESS_HIERARCHY
				FROM CM_USER CMU
				,VIEW_EXP_BRANCH_BUSINESS_HIERARCHY BH
				WHERE CMU.RELATION_TYPE ='OVERRIDING'
				AND BH.BRANCH_ID = CMU.BRANCH_ID 
				AND BH.USER_ID = CMU.USER_ID
				
			) A
			ORDER BY <include refid="buisnessHierarchyOrderBy"/>

		) A
		,TBL_EXP_CONTRACT_MEMBER CM 
		,TBL_EXP_USER U
		,TBL_EXP_PAYMENT P
		WHERE 1=1
		AND A.CONTRACT_ID	= #{CONTRACT_ID}
		AND A.USER_ID		= CM.USER_ID
		AND A.CONTRACT_ID   = CM.CONTRACT_ID 
		AND A.USER_ID 		= U.USER_ID 
		AND A.CONTRACT_ID 	= P.CONTRACT_ID(+)
		AND #{RESULT_ID}	= P.RESULT_ID(+)
		AND A.USER_ID		= P.USER_ID(+)
		AND P.USE_YN(+)		= 'Y'
		AND P.DEL_YN(+)		= 'N'
		AND CM.USE_YN		= 'Y'
		AND CM.DEL_YN		= 'N'
		ORDER BY A.PAYMENT_ID	
	</select>	
	
	<select id="getPayId" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getPayId
			수수료 PAY ID 조회
		*/
	 
		WITH CMU AS(
			<include refid="cmUsers"/>
		)
       <choose>
           <when test="EXEC_TYPE != null and EXEC_TYPE.equals('EXEC')">
           
			SELECT CMU.USER_ID, P.EXEC_PAY_ID AS PAY_ID , P.RATE
			FROM TBL_EXP_EXEC_PAY  P
			,TBL_EXP_CONTRACT C
			,CMU
			WHERE C.CONTRACT_ID		= #{CONTRACT_ID}
			AND P.CONTRACT_TYPE		= C.CONTRACT_TYPE
			AND CMU.RELATION_TYPE	= 'EXECUTE'
			AND CMU.USER_ID 		= #{USER_ID}
			AND P.GRADE 			= CMU.GRADE

           </when>
           <when test="EXEC_TYPE != null and EXEC_TYPE.equals('SALES')">
            
			SELECT CMU.USER_ID, P.SALES_PAY_ID AS PAY_ID , 
			DECODE( CMU.RELATION_TYPE, 'COWORK',NULL,  P.RATE ) RATE
			FROM TBL_EXP_SALES_PAY P
			,TBL_EXP_CONTRACT C
			,CMU
			WHERE C.CONTRACT_ID 	= #{CONTRACT_ID}
			AND P.CONTRACT_TYPE 	= C.CONTRACT_TYPE
			AND CMU.RELATION_TYPE 	= #{RELATION_TYPE}
			AND CMU.USER_ID 		= #{USER_ID}
			AND P.GRADE 			= CMU.GRADE
			AND P.SALES_TYPE  		= CMU.SALES_TYPE

           </when>
       </choose>
	
	</select>	
		
	<select id="getCostList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getCostList
			비용 내역(실적비용) 리스트 조회 
		*/
	 
		SELECT CONTRACT_ID
		, RESULT_ID
		, COST_ID
		, COST_NM
		, COST_DESC
		, COST_PRICE
		, USE_YN
		, DEL_YN
		, UPDATE_USER
		, UPDATE_DATE
		FROM TBL_EXP_COST
		WHERE 1=1
		AND CONTRACT_ID = #{CONTRACT_ID}
		AND RESULT_ID	= #{RESULT_ID}
		AND USE_YN		= 'Y'
		AND DEL_YN		= 'N'
		ORDER BY COST_ID  
	</select>	
	
	<update id="updateCostItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.updateCostItem
			비용(실적비용) 저장
		*/
		MERGE INTO TBL_EXP_COST T
		USING (
		
		  SELECT #{CONTRACT_ID}				AS CONTRACT_ID,
		         #{RESULT_ID} 				AS RESULT_ID,
		         #{COST_ID} 				AS COST_ID,
		         #{COST_NM} 				AS COST_NM,
		         #{COST_DESC} 				AS COST_DESC,
		         TO_NUMBER(REPLACE(#{COST_PRICE},',',''))	
		         							AS COST_PRICE,
		         'Y'	 					AS USE_YN,
		         'N' 						AS DEL_YN,
		         'admin'					AS UPDATE_USER
		  FROM dual
		  
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		AND T.RESULT_ID		= S.RESULT_ID 
		AND T.COST_ID		= S.COST_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.COST_NM 			= S.COST_NM,
		         T.COST_DESC 		= S.COST_DESC,
		         T.COST_PRICE 		= S.COST_PRICE,
		         T.DEL_YN			= S.DEL_YN,
		         T.UPDATE_USER		= S.UPDATE_USER,
		         T.UPDATE_DATE		= SYSDATE
		WHEN NOT MATCHED THEN 
    		INSERT (  CONTRACT_ID,   RESULT_ID,   COST_ID,   COST_NM,   COST_DESC,   COST_PRICE, USE_YN, DEL_YN,   UPDATE_USER, UPDATE_DATE)
   			VALUES (S.CONTRACT_ID, S.RESULT_ID, S.COST_ID, S.COST_NM, S.COST_DESC, S.COST_PRICE,    'Y',    'N', S.UPDATE_USER, SYSDATE    )

	</update>
	
	<delete id="deleteCostItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deleteCostItem
			비용(실적비용) 삭제
		*/
		UPDATE TBL_EXP_COST
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
		AND COST_ID	 		= #{COST_ID}
	</delete>
	
	<update id="updatePaymentItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.updatePaymentItem
			실적 수당 저장
		*/

		MERGE INTO TBL_EXP_PAYMENT T
		USING (
		
		  SELECT #{CONTRACT_ID}				AS CONTRACT_ID,
		         #{USER_ID} 				AS USER_ID,
		         #{RESULT_ID} 				AS RESULT_ID,
		         TO_NUMBER(#{PAYMENT_ID})	AS PAYMENT_ID,
		         #{PAYMENT} 				AS PAYMENT,
		         #{EXEC_TYPE} 				AS EXEC_TYPE,
		         TO_CHAR(#{PAY_ID})			AS PAY_ID,
		         #{RATE} 					AS RATE,
		         'Y'	 					AS USE_YN,
		         'N' 						AS DEL_YN,
		         'IyaI'						AS UPDATE_USER
		  FROM dual
		  
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		AND T.USER_ID		= S.USER_ID 
		AND T.RESULT_ID		= S.RESULT_ID 
		AND T.PAYMENT_ID	= S.PAYMENT_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.PAYMENT 			= S.PAYMENT,
		         T.EXEC_TYPE 		= S.EXEC_TYPE,
		         T.PAY_ID			= S.PAY_ID,
		         T.RATE				= S.RATE,
		         T.USE_YN			= S.USE_YN,
		         T.DEL_YN			= S.DEL_YN,
		         T.UPDATE_USER		= S.UPDATE_USER,
		         T.UPDATE_DATE		= SYSDATE
		WHEN NOT MATCHED THEN 
    		INSERT (  CONTRACT_ID,   USER_ID,   RESULT_ID,   PAYMENT,   PAYMENT_ID,   EXEC_TYPE,   PAY_ID,   RATE,   USE_YN,   DEL_YN,   UPDATE_USER, UPDATE_DATE)
   			VALUES (S.CONTRACT_ID, S.USER_ID, S.RESULT_ID, S.PAYMENT, S.PAYMENT_ID, S.EXEC_TYPE, S.PAY_ID, S.RATE, S.USE_YN, S.DEL_YN, S.UPDATE_USER, SYSDATE)
	</update>
	
	<delete id="deletePaymentItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deletePaymentItem
			실적 수당 삭제
		*/
		UPDATE TBL_EXP_PAYMENT
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND USER_ID	 		= #{USER_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
		AND PAYMENT_ID	 	= #{PAYMENT_ID}
	</delete>
	
	<select id="deleteResultTabSeries" statementType="CALLABLE" parameterType="java.util.HashMap" flushCache="true">
	    <!-- result.deleteResultTabSeries
	         실적 SERIES 테이블 삭제
	    -->
	    { CALL
		    DECLARE
		        p_CONTRACT_ID	VARCHAR2(30);
		        p_RESULT_ID		VARCHAR2(30);
		    BEGIN
		    
		        p_CONTRACT_ID := #{CONTRACT_ID};
		        p_RESULT_ID   := #{RESULT_ID};
		    
		        UPDATE TBL_EXP_RESULT
		        SET USE_YN = 'N',
		            DEL_YN = 'Y'
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		        
		        UPDATE TBL_EXP_PAYMENT
		        SET USE_YN = 'N',
		            DEL_YN = 'Y'
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		        
		        UPDATE TBL_EXP_COST
		        SET USE_YN = 'N',
		            DEL_YN = 'Y'
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		    END
	    }
	</select>

</mapper>
