<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrInfo">

	<cache />

	<!--
	인사정보 관리 
	 -->	
	<select id="getHrInfoList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getHrInfoList
			인사정보 리스트 조회 
		*/
		SELECT U.SP_CSTM_ID
			,U.USER_ID
			,U.USER_NM
			,U.USER_DESC
            ,U.GENDER
            ,GET_CODE_NM('GENDER', U.GENDER)		AS GENDER_NM
			,U.E_MAIL
			,U.PHONE_NUM
            ,BR.BASE_BRANCH_ID
            ,BR.BASE_BRANCH_NM
            ,BR.SP_BRANCH_ID
            ,BR.SP_BRANCH_NM
            ,BR.BRANCH_ID
            ,BR.BRANCH_NM
			,U.ROLE
			,GET_CODE_NM('USER_ROLE', U.ROLE)		AS ROLE_NM
			,U.GRADE
			,GET_CODE_NM('USER_GRADE', U.GRADE)		AS GRADE_NM
			,U.STATE
			,GET_CODE_NM('USER_STATE', U.STATE)		AS STATE_NM
			,TO_CHAR( U.REG_DATE , 'YYYY-MM-DD' ) 	AS REG_DATE
			,U.JUMIN
			,U.POST_NUM
			,U.ADDR1
			,U.ADDR2
			,U.ADDR1 || '&lt;BR&gt;' || U.ADDR2  AS ADDR
			,U.USE_YN
			,U.DEL_YN
			,U.UPDATE_USER
			,U.UPDATE_DATE
			,NVL(TO_CHAR( I.AMOUNT   , '999,999,999,999,999'),'0')	AS AMOUNT 
			,NVL(TO_CHAR( I.REG_DATE ,'YYYY-MM-DD'  ),'-' ) 		AS INSURANCE_REG_DATE
			,NVL(TO_CHAR( I.EXP_DATE ,'YYYY-MM-DD'  ),'-' ) 		AS INSURANCE_EXP_DATE
			,TO_CHAR( GHIS.MAX_UPGRADE_DATE,'YYYY-MM-DD') 			AS UPGRADE_DATE
            ,U.SURETY_INSURANCE 
            ,NVL(GET_CODE_NM('G_SURETY_INSURANCE', U.SURETY_INSURANCE),'-') AS SURETY_INSURANCE_NM 
		FROM TBL_EXP_USER U
		, TBL_EXP_SURETY_INSURANCE I
        , ( SELECT BB.BASE_BRANCH_ID, BB.BASE_BRANCH_NM, BB.USER_ID AS BASE_USER_ID
        	,SB.SP_BRANCH_ID, SB.SP_BRANCH_NM, SB.USER_ID AS SP_USER_ID
        	,B.BRANCH_ID, B.BRANCH_NM, B.USER_ID AS USER_ID
        	FROM TBL_EXP_BASE_BRANCH BB
        	, TBL_EXP_SP_BRANCH SB
        	, TBL_EXP_BRANCH B
        	WHERE 1=1
        	AND bb.base_branch_id = sb.BASE_BRANCH_ID
        	AND sb.sp_branch_id = b.sp_branch_id
        ) BR
        , (SELECT USER_ID,  MAX(UPGRADE_DATE) AS MAX_UPGRADE_DATE
        	FROM TBL_EXP_GRADE_HIST
        	GROUP BY USER_ID
        ) GHIS
		WHERE 1=1
		AND U.SP_CSTM_ID = I.SP_CSTM_ID(+)
        AND U.USER_ID = I.USER_ID(+)
        AND U.BRANCH_ID = BR.BRANCH_ID(+)
        AND U.USER_ID = GHIS.USER_ID(+)	
        AND U.DEL_YN = 'N'
        AND U.USE_YN = 'Y'
        <if test=" USER_NM != null and !USER_NM.equals('') ">
        AND U.USER_NM like '%' || #{USER_NM} || '%'
        </if>
        ORDER BY USER_ID
	</select>
	 	
	<update id="updateHrInfo" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.updateHrInfo
			인사정보  저장
		*/
		MERGE INTO TBL_EXP_USER T
		USING (
		  SELECT #{SP_CSTM_ID} 	AS SP_CSTM_ID,
		         #{USER_ID} 	AS USER_ID,
		         #{USER_NM} 	AS USER_NM,
		         #{USER_DESC} 	AS USER_DESC,
		         #{GENDER} 		AS GENDER,
		         #{E_MAIL} 		AS E_MAIL,
		         #{PHONE_NUM} 	AS PHONE_NUM,
		         #{BRANCH_ID}	AS BRANCH_ID,
		         #{ROLE}		AS ROLE,
		         #{GRADE}		AS GRADE,
		         NVL(#{STATE},'INUSE') AS STATE,
		         TO_DATE( #{REG_DATE}, 'YYYY-MM-SS' )	AS REG_DATE,
		         #{JUMIN}		AS JUMIN,
		         #{POST_NUM}	AS POST_NUM,
		         #{ADDR1}		AS ADDR1,
		         #{ADDR2}		AS ADDR2,
		         'system' 		AS UPDATE_USER,
		         SYSDATE 		AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.USER_NM 		= S.USER_NM,
		    T.GENDER 		= S.GENDER,
		    T.USER_DESC 	= S.USER_DESC,
		    T.E_MAIL 		= S.E_MAIL,
		    T.PHONE_NUM 	= S.PHONE_NUM,
		    T.BRANCH_ID 	= S.BRANCH_ID,
		    T.ROLE 			= S.ROLE,
		    T.GRADE 		= S.GRADE,
		    T.STATE 		= S.STATE,
		    T.REG_DATE 		= S.REG_DATE,
		    T.JUMIN 		= S.JUMIN,
		    T.POST_NUM 		= S.POST_NUM,
		    T.ADDR1 		= S.ADDR1,
		    T.ADDR2 		= S.ADDR2,
		    T.UPDATE_USER 	= S.UPDATE_USER,
		    T.UPDATE_DATE 	= S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   USER_NM ,   GENDER ,   USER_DESC
    		,   E_MAIL,   PHONE_NUM, 	BRANCH_ID,	ROLE,	GRADE,	STATE
    		,	REG_DATE,	JUMIN,	POST_NUM,	ADDR1,	ADDR2		
    		,   USE_YN
    		,   DEL_YN
    		,  UPDATE_USER,   UPDATE_DATE )
   			VALUES ( S.SP_CSTM_ID, S.USER_ID, S.USER_NM , S.GENDER , S.USER_DESC
   			, S.E_MAIL,  S.PHONE_NUM,  S.BRANCH_ID,	S.ROLE,	S.GRADE,	S.STATE
   			, S.REG_DATE,	S.JUMIN,	S.POST_NUM,	S.ADDR1,	S.ADDR2
   			, 'Y'
   			, 'N'
   			, S.UPDATE_USER, S.UPDATE_DATE )
	</update>
	
	<delete id="deleteHrInfo" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.deleteHrInfo
			인사정보  삭제
		*/
		UPDATE TBL_EXP_USER
		SET DEL_YN = 'Y' 
		WHERE SP_CSTM_ID = #{SP_CSTM_ID} 
		AND	  USER_ID	 = #{USER_ID}
	</delete>
	
	<select id="getBaseBranchList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getBaseBranchList
			본부 리스트 조회 
		*/
		SELECT U.BASE_BRANCH_ID AS CODE_ID
			,  U.BASE_BRANCH_NM AS CODE_NM
		FROM TBL_EXP_BASE_BRANCH U
	WHERE 1=1
	</select>
	
	<select id="getSpBranchList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getSpBranchList
			지사 리스트 조회 
		*/
		SELECT U.SP_BRANCH_ID AS CODE_ID
			,  U.SP_BRANCH_NM AS CODE_NM
		FROM TBL_EXP_SP_BRANCH U
		WHERE 1=1
		<if test=" BASE_BRANCH_ID != null and !BASE_BRANCH_ID.equals('') ">
		AND BASE_BRANCH_ID = #{BASE_BRANCH_ID}
		</if>
	</select>
	
	<select id="getBranchList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getBranchList
			지점 리스트 조회 
		*/
		SELECT U.BRANCH_ID AS CODE_ID
			,  U.BRANCH_NM AS CODE_NM
		FROM TBL_EXP_BRANCH U
		WHERE 1=1
		<if test=" SP_BRANCH_ID != null and !SP_BRANCH_ID.equals('') ">
		AND SP_BRANCH_ID = #{SP_BRANCH_ID}
		</if>
	</select>
	
	<update id="updateSuretyInsurance" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.updateSuretyInsurance
			보증보험  저장
		*/
		MERGE INTO TBL_EXP_SURETY_INSURANCE T
		USING (
		
		  SELECT #{SP_CSTM_ID} 										AS SP_CSTM_ID,
		         #{USER_ID} 										AS USER_ID,
		         TO_NUMBER( REPLACE(#{AMOUNT},',','') ) 			AS AMOUNT,
		         TO_DATE( #{INSURANCE_REG_DATE} , 'YYYY-MM-DD' )	AS REG_DATE,
		         TO_DATE( #{INSURANCE_EXP_DATE} , 'YYYY-MM-DD' )	AS EXP_DATE 
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.AMOUNT 		= S.AMOUNT, 
		    T.REG_DATE 		= S.REG_DATE,
		    T.EXP_DATE 		= S.EXP_DATE 
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   AMOUNT,   REG_DATE,   EXP_DATE)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.AMOUNT, S.REG_DATE, S.EXP_DATE)
	</update>
	
	<select id="getEducationHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getEducationHistList
			학력 리스트 조회 
		*/
		SELECT
		SP_CSTM_ID
		,USER_ID
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM') || ' ~ ' || TO_CHAR(END_PERIOD_DATE,'YYYY-MM') AS PERIOD_DATE 
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') AS START_PERIOD_DATE
		,GUBUN
		,SCHOOL_NAME
		,MAJOR
		,GRADUATE_YN
		,TO_CHAR(END_PERIOD_DATE, 'YYYY-MM-DD') AS END_PERIOD_DATE
		FROM TBL_EXP_EDUCATION_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{SP_CSTM_ID}
		AND USER_ID = #{USER_ID}
	</select>
	
	<select id="getCareerHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getCareerHistList
			경력 리스트 조회 
		*/
		SELECT 
		SP_CSTM_ID
		,USER_ID
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM') || ' ~ ' || TO_CHAR(END_PERIOD_DATE,'YYYY-MM') AS PERIOD_DATE 
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') AS START_PERIOD_DATE
		,GUBUN
		,DEPARTMENT
		,POSITION
		,BIZ_INFORM
		,TO_CHAR(END_PERIOD_DATE, 'YYYY-MM-DD') AS END_PERIOD_DATE
		FROM TBL_EXP_CAREER_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{SP_CSTM_ID}
		AND USER_ID = #{USER_ID}
	</select>
	
	<select id="getPositionHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getPositionHistList
			직책 승급 리스트 조회 
		*/
		SELECT 
		SP_CSTM_ID
		,USER_ID
		,TO_CHAR(PERSONAL_APPOINTMENT_DATE,'YYYY-MM-DD') AS PA_DATE
		,DEPARTMENT
		,POSITION
		FROM TBL_EXP_POSITION_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{SP_CSTM_ID}
		AND USER_ID = #{USER_ID}
	</select>
	
	<select id="getGradeHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getGradeHistList
			등급 승급 리스트 조회 
		*/
		SELECT 
		SP_CSTM_ID
		,USER_ID
		,TO_CHAR(UPGRADE_DATE, 'YYYY-MM-DD') AS UPGRADE_DATE 
		,GRADE
		,GET_CODE_NM('USER_GRADE', GRADE)		AS GRADE_NM
		FROM TBL_EXP_GRADE_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{SP_CSTM_ID}
		AND USER_ID = #{USER_ID}
	</select>
	
</mapper>
